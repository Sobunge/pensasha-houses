package com.pensasha.backend.modules.unit;

import com.pensasha.backend.modules.property.Property;
import com.pensasha.backend.modules.user.tenant.Tenant;
import jakarta.persistence.*;
import lombok.*;

/**
 * Entity representing a rental unit within a property.
 * Each unit belongs to a specific property and may be assigned to a tenant.
 */
@Entity
@Table(name = "units", uniqueConstraints = {
    @UniqueConstraint(columnNames = {"unit_number", "property_id"})
})
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Unit {

    /**
     * Unique identifier for the unit.
     * Auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Unique unit number or identifier within the property (e.g. "A1", "B2").
     * Cannot be null or duplicated within the same property.
     */
    @Column(name = "unit_number", nullable = false)
    private String unitNumber;

    /**
     * The rent amount for this particular unit.
     * Cannot be null.
     */
    @Column(nullable = false)
    private Double rentAmount;

    /**
     * The current status of the unit (e.g. OCCUPIED, VACANT, RESERVED, UNDER_MAINTENANCE).
     * Cannot be null.
     */
    @Enumerated(EnumType.STRING)
    @Column(name = "status", nullable = false)
    private UnitStatus status;

    /**
     * The property to which this unit belongs.
     * Many units can belong to a single property.
     * Avoids circular references in toString and equals/hashCode.
     */
    @ManyToOne
    @JoinColumn(name = "property_id", nullable = false)
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Property property;

    /**
     * The tenant currently occupying this unit, if any.
     * Many units can be assigned to a single tenant (if allowed).
     * Avoids circular references in toString and equals/hashCode.
     */
    @ManyToOne
    @JoinColumn(name = "tenant_id")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Tenant tenant;
}
