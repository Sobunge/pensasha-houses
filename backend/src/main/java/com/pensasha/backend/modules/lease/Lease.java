package com.pensasha.backend.modules.lease;

// Import necessary classes and annotations
import java.time.LocalDate;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.pensasha.backend.modules.invoice.Invoice;
import com.pensasha.backend.modules.unit.Unit;
import com.pensasha.backend.modules.user.tenant.Tenant;

import jakarta.persistence.*;
import lombok.*;

/**
 * Entity class representing a Lease record.
 * 
 * A Lease ties a Tenant to a specific Unit, specifying the lease period,
 * monthly rent, and associated invoices.
 */
@Entity
@Table(name = "leases") // Map this entity to the 'leases' table in the database
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Lease {

    /**
     * Primary key for the lease record.
     * Automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The tenant associated with this lease.
     * 
     * Many leases can belong to one tenant.
     * Mapped via a foreign key column 'tenant_id'.
     */
    @ManyToOne
    @JoinColumn(name = "tenant_id", nullable = false)
    private Tenant tenant;

    /**
     * The unit being leased.
     * 
     * Many leases can be linked to one unit.
     * Mapped via a foreign key column 'unit_id'.
     */
    @ManyToOne
    @JoinColumn(name = "unit_id", nullable = false)
    private Unit unit;

    /**
     * Monthly rent amount for the lease.
     * Cannot be null.
     */
    @Column(nullable = false)
    private Double monthlyRent;

    /**
     * The start date of the lease.
     * Serialized to JSON in 'yyyy-MM-dd' format.
     * Cannot be null.
     */
    @JsonFormat(pattern = "yyyy-MM-dd")
    @Column(nullable = false)
    private LocalDate leaseStartDate;

    /**
     * The end date of the lease.
     * Serialized to JSON in 'yyyy-MM-dd' format.
     * Cannot be null.
     */
    @JsonFormat(pattern = "yyyy-MM-dd")
    @Column(nullable = false)
    private LocalDate leaseEndDate;

    /**
     * List of invoices associated with this lease.
     * 
     * One lease can have multiple invoices.
     * - mappedBy: specifies the field in the Invoice entity that owns the
     * relationship.
     * - cascade = CascadeType.ALL: any operations (persist, remove, etc.) on Lease
     * will also cascade to its invoices.
     * - fetch = FetchType.LAZY: invoices will be loaded on-demand, not with the
     * Lease itself.
     */
    @OneToMany(mappedBy = "lease", orphanRemoval = true, cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<Invoice> invoices;
}
