package com.pensasha.backend.entity;

import java.time.LocalDateTime;

import com.fasterxml.jackson.annotation.JsonIgnore;

import jakarta.persistence.*;
import lombok.*;

/**
 * Entity representing a User. This is the base class for all user types (e.g., Landlord, Tenant, Caretaker).
 * Inheritance strategy is 'JOINED', meaning subclasses will have their own tables but share the common fields of this class.
 */
@Entity
@Table(name = "users")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Inheritance(strategy = InheritanceType.JOINED) // Allows subclasses (e.g., LandLord, Tenant) to extend this entity
public class User {

    /**
     * Unique identifier for each user. 
     * This field is automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * First name of the user.
     * Cannot be null.
     */
    @Column(nullable = false)
    private String firstName;

    /**
     * Second name of the user (optional).
     */
    private String secondName;

    /**
     * Third name of the user.
     * Cannot be null.
     */
    @Column(nullable = false)
    private String thirdName;

    /**
     * Unique identification number for the user (e.g., ID or passport number).
     * Cannot be null and must be unique.
     */
    @Column(unique = true, nullable = false)
    private String idNumber;

    /**
     * User's password (stored securely, should be ignored during serialization).
     * Cannot be null.
     */
    @JsonIgnore // Ensures password is not included in JSON responses
    @Column(nullable = false)
    private String password;

    /**
     * Unique phone number for the user.
     * Cannot be null and must be unique.
     */
    @Column(unique = true, nullable = false)
    private String phoneNumber;

    /**
     * URL or path to the user's profile picture (optional).
     */
    private String profilePicture;

    /**
     * Role of the user (e.g., ADMIN, LANDLORD, CARETAKER, TENANT).
     * Role is mandatory and stored as a string in the database.
     */
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private Role role;

    /**
     * Indicates whether the user's account is enabled.
     * Default value is true, meaning the account is enabled by default.
     */
    @Column(nullable = false)
    private boolean enabled = true;

    /**
     * Indicates whether the user's account is locked (e.g., after too many failed login attempts).
     * Default value is false, meaning the account is not locked by default.
     */
    private boolean locked = false;

    /**
     * The expiration date of the user's account. If null, the account does not expire.
     */
    private LocalDateTime accountExpirationDate;

    /**
     * The expiration date of the user's password. If null, the password does not expire.
     */
    private LocalDateTime passwordExpirationDate;

}
